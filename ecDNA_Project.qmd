---
title: "ecDNA_Project"
author: "Hailey Johnson"
format: html
editor: visual
---

## FIRST DAY: Recreating a figure of amplicon types in each type of cancer...

27 April 2023

First we need to get. our packages in and download a csv of our file...

```{r}
library(tidyverse)
library(readxl)

table1 = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/ecDNA_Raw_Data.xlsx")

#table1 has all the samples and the type of DNA amplicon

table3 = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/ecDNA_Raw_Data.xlsx", sheet = 3)

#table3 includes the kind of cancer 
```

We need to calculate the percentage of each type of amplicon in each type of cancer... totally just realized we only need table 3

We can use a FOR LOOP! but first lets make a nice dataframe of all the information we want.

```{r}
#cleaning table 3 to only use what we need

clean = table3[which(table3$tumor_or_normal == "tumor"), ]
data = clean[c(1, 5, 6)]

cancerTypes = unique(data$lineage)
ampliconTypes = unique(data$sample_classification)

cancer = c()
amplicon = c()
percentage = c()

for (cancerX in cancerTypes) {
  total = sum(data$lineage == cancerX)
  indices = which(data$lineage == cancerX)
  temp = data[indices, ]
  
  for (type in ampliconTypes) {
   n = sum(temp$sample_classification == type)
    #gets number of type of amplicon on that cancer type
    
    ratio = (n/total)
    #this is the ratio of the amplicon type in the cancer type
    cancer = append(cancer, cancerX)
    amplicon = append(amplicon, type)
    percentage = append(percentage, ratio)
  }
  
}

rm(n, type, ratio, total, cancerTypes, cancerX, temp, indices, ampliconTypes) #clean up environment variables
```

Perfect! Now we have our vectors of our data... now we need to make it into a table and graph.

```{r}
plot = tibble(cancer, amplicon, percentage)

plot$amplicon = factor(amplicon, levels = c("No-fSCNA", "BFB", "Linear", "Heavily-rearranged", "Circular"))

#we are going to manually order them lol...

ordering = plot[which(plot$amplicon == "Circular"),]
ordering = ordering %>% arrange(desc(percentage))
order = pull(ordering, cancer)


ggplot(plot, aes(x = factor(cancer, levels = order), y = percentage, fill = amplicon)) +
  geom_bar(stat = "identity") +
  xlab("Cancer Type") +
  ylab("Percentage") +
  scale_fill_manual(values = c("#FFFFFF", "#9966FF", "#CC99CC", "cornflowerblue", "#0000FF" )) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust=1), axis.title.x = element_text(size = 10))
```

Part 2: Two questions

1.  How did they graph these in the paper?
2.  What percentage of each amplicon type have multiple regions associated with their aplicon intervals?

Let's answer the second question now...

```{r}
# we just need to read in table1 which I read in excel at the beginning

library(stringr)
char = ","

intervals = pull(table1, amplicon_intervals)
howMany = grepl(char, intervals)

ampliconTypes = unique(table1$amplicon_classification)

amplicon = c()
percentage = c()

for (type in ampliconTypes) {
  total = sum(table1$amplicon_classification == type)
  
  temp = table1[which(table1$amplicon_classification == type),]
  
  n = sum(grepl(char, pull(temp, amplicon_intervals)))
  ratio = (n/total)
  
  amplicon = append(amplicon, type)
  percentage = append(percentage, ratio)
}

rm(temp, type, ratio, total, howMany, intervals, ampliconTypes, n, char)

#now lets visualize this
plot = tibble(amplicon, percentage)

ggplot(data = plot, aes(amplicon, percentage)) +
  geom_bar(stat = "identity", fill = "lightblue") +
  geom_text(aes(label=paste0(round(percentage, 2)*100,"%"))) +
  theme_classic() +
  ylab("Percentage With Multiple Regions") +
  xlab("Amplicon Type")


```

Look at the outliers- 5% of linear amplicons types and 7% of heavily rearranged... also could be same regions, I didn't check for similar regions just a comma...

What other genes are included in those regions?

Move onto second figure using table 1!

What are the specific amplicon indices? We can assign our own indices...

NEXT STEPS

1.  Make a bed file from table 1- 4th column is an amplicon index specifying which amplicon it came from! maybe 5th doing sample barcode, maybe another with lineage of type of cancer
2.  Make a bedfile of genes! take shortest isoform of the gene

which genes are overlapping?

## Making a BedFile! For bedtools intersect between oncogenes and our ecDNA data...

28 April 2023

```{r}
library(tidyverse)
library(readxl)
library(data.table)

# amplicon data

amplicon = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/ecDNA_Raw_Data.xlsx", sheet = 1)

#Right now there's giving a unique index to each amplicon in each index
amplicon$index <- paste0("amp",seq(1:nrow(amplicon)))

length(unique(amplicon$sample_barcode)) #Right now there's 1348 patient samples, and 5791 amplicons from thos patients!

#Time to actually separate out each chromosomal region
amplicon <- amplicon %>% separate_rows(amplicon_intervals, sep = ",")

amplicon <- amplicon %>% separate(amplicon_intervals, c("chr", "interval"), ":")
amplicon$chr = paste0("chr", amplicon$chr)

amplicon <- amplicon %>% separate(interval, c("start", "end"), "-")

amplicon$start <- as.numeric(amplicon$start)
amplicon$end <- as.numeric(amplicon$end)

#We want to remove all the amplicons that are linear?
amplicon <- amplicon[amplicon$amplicon_classification != "Linear",]

meta = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/ecDNA_Raw_Data.xlsx", sheet = 3)

amplicon <- merge(amplicon, meta, by = "sample_barcode")

columns = c("chr", "start", "end", "amplicon_classification", "sample_barcode", "index", "lineage")

#put it all together and make the bedfile...
bedFile = amplicon[ ,columns]
bedFile = bedFile %>% filter(chr != "chrGL000220.1")
bedFile = bedFile %>% filter(chr != "chrGL000210.1")

#there's actuall way more than I thought...
bedFile = bedFile[which(!str_detect(bedFile$chr, "chrGL")),]
```

1.  Do I take out linear ecDNA?
2.  Do I remove the GL000220.1
3.  How should I export the file? CSV? without quotation marks?

```{r}
install.packages("xlsx")
library("xlsx")
#Exporting the bedfile
write.xlsx(bedFile, "ecDNA.xlsx")
```

***Used "brew install" to install bedtools!***

Next step:

count the occurrence of each gene and make a plot like in the paper:

-   Katie has a list of oncogenes, only take the oncogenes from the gene body bed file

-   Run bedtools: -a gene body -b fragment file -c count occurrence of first entry

-   We want how many times the oncogenes show up in fragments... figure has info of number of times oncogenes show us and in which form they are amplified...

First, lets isolate only oncogenes from the bed file

```{r}
library(tidyverse)
library(data.table)
library(readxl)

# amplicon data

oncogenes = read.table("/Users/haileyjohnson/Desktop/ecDNA_Project/bedtools_intersect/combined_oncogenes.txt")
genebody = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/bedtools_intersect/geneBody.xlsx")

#now we have the entire genebody file, and the individual oncogenes we want to look at.

oncogenes = oncogenes$V1
special = genebody[which(genebody$gene %in% oncogenes), ]

write.xlsx(special, "oncogenebody.xlsx")

#yay! now we have a gene body file of just start and stop of oncogenes! Now I will copy and paste that into the genebody bed file!
```

Now that I can copy in my oncogene body files I just made, I can run bedtools and see overlap!

*bedtools intersect -a /Users/haileyjohnson/Desktop/ecDNA_Project/bedtools_intersect/geneBody.bed -b /Users/haileyjohnson/Desktop/ecDNA_Project/bedtools_intersect/ecDNABedFile.bed -wb \> /Users/haileyjohnson/Desktop/ecDNA_Project/bedtools_intersect/overlap.txt*

(I used wb to just output a line for every time there is an overlap)

## Finding amplicon occurrences in oncogenes

1 May 2023

Now we have overlap.txt, which writes out the original DNA fragment entry for each overlap in oncogenes. Now we can use R and count the number of occurrences!

We need to get rid of the redundant isoforms... take the isoform with the most occurrence

aggregate to take maximum number of 1 isoform...

```{r}
library(tidyverse)
library(readxl)
overlap = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/bedtools_intersect/overlap.xlsx")
colnames(overlap) = c("chr", "start", "stop", "oncogene", "isoform", "Chr", "Start", "Stop", "amplicon", "idk", "ampIndex", "cancer")
```

```{r}
genes = unique(overlap$oncogene)

beasts = c()

for (geneboi in genes) {
  temp = overlap[which(overlap$oncogene == geneboi), ]
  temp = temp %>% group_by(isoform) %>% summarise(value = n()) %>% arrange(desc(value))
  beasts = append(beasts, temp$isoform[1])
}

cleanedIsoforms = overlap %>% filter(isoform %in% beasts)
overlap = cleanedIsoforms

write.xlsx(cleanedIsoforms, "cleanedOverlap.xlsx")

rm(temp,geneboi,beasts,genes)
```

Now, our data are cleaned for the most recurrent isoforms!!

Now we can plot things...

Ratio of each amplicon type:

```{r}
oncogenes = unique(overlap$oncogene)
ampliconTypes = unique(overlap$amplicon)

genes = c()
amplicon = c()
percentage = c()

for (gene in oncogenes) {
  total = sum(overlap$oncogene == gene)
  temp = overlap[which(overlap$oncogene == gene), ]
  
  for (type in ampliconTypes) {
   n = sum(temp$amplicon == type)
    #gets number of type of amplicon on that oncogene
    
    ratio = (n/total)
    #this is the ratio of the amplicon type in the cancer type
    genes = append(genes, gene)
    amplicon = append(amplicon, type)
    percentage = append(percentage, ratio)
  }
  
}
```

```{r}
plot = tibble(genes, amplicon, percentage)

#some information...
print(paste0("There are ", length(oncogenes), " oncogenes out of 994 found in our DNA fragmentation data."))

#Out of 994 in the list Katie gave me, there are 857 oncogenes found overlapping in our DNA fragmentation data

#when looking at the data, there are many which are 100% in heavily rearranged amplcons...
```

Let's try another kind of plot and copy what the paper did...

These are the genes they included:

"MDM2", "MYC", "EGFR", "CDK4", "ERBB2", "SOX2", "TERT", "CCND1", "E2F3", "CCNE1", "CDK6", "MDM4", "NEDD9", "MCL1", "AKT3", "BCL2L1", "ZNF217", "KRAS", "PDGFRA", "AKT1", "MYCL", "NKX2-1", "IGF1R", "PAX8"

```{r}
paperGenes = c("MDM2", "MYC", "EGFR", "CDK4", "ERBB2", "SOX2", "TERT", "CCND1", "E2F3", "CCNE1", "CDK6", "MDM4", "NEDD9", "MCL1", "AKT3", "BCL2L1", "ZNF217", "KRAS", "PDGFRA", "AKT1", "MYCL", "NKX2-1", "IGF1R", "PAX8")

plot = plot[which(plot$genes %in% paperGenes), ]

plot$amplicon = factor(plot$amplicon, levels = c("BFB", "Circular", "Heavily-rearranged"))

#we are going to manually order them lol...

ordering = plot[which(plot$amplicon == "Circular"),]
ordering = ordering %>% arrange(desc(percentage))
order = pull(ordering, genes)


ggplot(plot, aes(x = factor(genes, levels = paperGenes), y = percentage, fill = amplicon)) +
  geom_bar(stat = "identity") +
  xlab("Oncogene") +
  ylab("Percentage") +
  scale_fill_manual(values = c("#CC99CC", "#9966FF", "cornflowerblue")) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust=1), axis.title.x = element_text(size = 10))

```

This is interesting, but we should probably also follow the paper and plot the number of samples for each oncogene...

```{r}
library(tidyverse)
library(readxl) 
#I WAS USING THE WRONG OVERLAP AND NOW THE CLEANED ISOFORM OVERLAP!
overlap = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/bedtools_intersect/overlap.xlsx")
colnames(overlap) = c("chr", "start", "stop", "oncogene", "random", "Chr", "Start", "Stop", "amplicon", "idk", "ampIndex", "cancer")
```

```{r}
paperGenes = c("MDM2", "MYC", "EGFR", "CDK4", "ERBB2", "SOX2", "TERT", "CCND1", "E2F3", "CCNE1", "CDK6", "MDM4", "NEDD9", "MCL1", "AKT3", "BCL2L1", "ZNF217", "KRAS", "PDGFRA", "AKT1", "MYCL", "NKX2-1", "IGF1R", "PAX8")
ampliconTypes = unique(overlap$amplicon)

oncogenes = c()
amplicon = c()
occurrence = c()

for (gene in paperGenes) {
  temp = overlap[which(overlap$oncogene == gene), ]
  
  for (type in ampliconTypes) {
    n = sum(temp$amplicon == type)
    #gets number of type of amplicon on that oncogene
    
    oncogenes = append(oncogenes, gene)
    amplicon = append(amplicon, type)
    occurrence = append(occurrence, n)
  }
  
}

#cleaning
rm(n,type,gene,ampliconTypes)

plot = tibble(oncogenes, amplicon, occurrence)
```

```{r}
plot$amplicon = factor(plot$amplicon, levels = c("Heavily-rearranged", "BFB", "Circular"))

#we are going to manually order them lol...

ordering = plot[which(plot$amplicon == "Circular"),] %>% arrange(desc(occurrence))
order = pull(ordering, oncogenes)

rm(ordering) #cleaning


ggplot(plot, aes(x = factor(oncogenes, levels = paperGenes), y = occurrence, fill = amplicon)) +
  geom_bar(stat = "identity") +
  xlab("Oncogene") +
  ylab("Samples") +
  scale_fill_manual(values = c("#CC99CC", "cornflowerblue", "#9966FF")) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust=1), axis.title.x = element_text(size = 10))

```

Which genes are most frequently amplified?

```{r}
library(tidyverse)
library(readxl)
overlap = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/bedtools_intersect/overlap.xlsx")
#STILL WRONG OVERLAP ^^^^
colnames(overlap) = c("chr", "start", "stop", "oncogene", "random", "Chr", "Start", "Stop", "amplicon", "idk", "ampIndex", "cancer")

oncogenes = unique(overlap$oncogene)

genes = c()
occurrence = c()

for (gene in oncogenes) {
  temp = overlap[which(overlap$oncogene == gene), ]
  
  n = length(temp$oncogene)
    #gets number of genes amplified in our data
    
  genes = append(genes, gene)
  occurrence = append(occurrence, n)
}

temp = tibble(genes, occurrence) %>% arrange(desc(occurrence))
temp = temp[1:24, ] #pick 24 most frequently amplified oncogenes!

highgenes = pull(temp, genes)


rm(n,genes,gene,occurrence)




ampliconTypes = unique(overlap$amplicon)

oncogenes = c()
amplicon = c()
occurrence = c()

for (gene in highgenes) {
  temp = overlap[which(overlap$oncogene == gene), ]
  
  for (type in ampliconTypes) {
    n = sum(temp$amplicon == type)
    #gets number of type of amplicon on that oncogene
    
    oncogenes = append(oncogenes, gene)
    amplicon = append(amplicon, type)
    occurrence = append(occurrence, n)
  }
  
}

#cleaning
rm(n,type,gene,ampliconTypes)

plot = tibble(oncogenes, amplicon, occurrence)
```

```{r}
plot$amplicon = factor(plot$amplicon, levels = c("Heavily-rearranged", "BFB", "Circular"))

#we are going to manually order them lol...

ordering = plot[which(plot$amplicon == "Circular"),] %>% arrange(desc(occurrence))
order = pull(ordering, oncogenes)

rm(ordering) #cleaning


ggplot(plot, aes(x = factor(oncogenes, levels = highgenes), y = occurrence, fill = amplicon)) +
  geom_bar(stat = "identity") +
  xlab("Oncogene") +
  ylab("Amplicons") +
  scale_fill_manual(values = c("#CC99CC", "cornflowerblue", "#9966FF")) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust=1), axis.title.x = element_text(size = 10))
```

## Discover oncogenes which are amplified together! *NEW STUFF YAY*

2 May 2023

-   We want to make 24 figures for each of the most recurrent oncogenes from the paper. Using the ampIndex, we can know which genes came from the same samples and amplicon.

-   I'm thinking we should run a for loop through every gene, and make a big data frame with each gene and which ones correlate with it? Or make a temporary data frame for each gene and plot each in a for loop?

Setting up data again to make life easier:

```{r}
library(tidyverse)
library(readxl)
overlap = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/data_cleaning/cleaned_overlap_half_arm.xlsx")[ ,-1] #IMPORTANT, THIS IS THE CLEANED OVERLAP SET WHERE WE PICKED THE MOST RECURRENT ISOFROM OF EACH GENE! GOOD JOB HAILEY
```

```{r}
oncogenes = c("MDM2", "MYC", "EGFR", "CDK4", "ERBB2", "SOX2", "TERT", "CCND1", "E2F3", "CCNE1", "CDK6", "MDM4", "NEDD9", "MCL1", "AKT3", "BCL2L1", "ZNF217", "KRAS", "PDGFRA", "AKT1", "MYCL", "NKX2-1", "IGF1R", "PAX8")

overlap = overlap[which(overlap$oncogene %in% oncogenes), ] 
#select only those 24 genes to look at...
```

```{r}

#Run a for loop to see every gene and how other genes are involved with it

for (gene in oncogenes) {
  
  temp = overlap[which(overlap$oncogene == gene), ]
  ampliconsInvolved = unique(temp$ampIndex)
  rm(temp)
  #This found which amplicon indices are involved with the gene being looked at in the for loop
  
  #If a gene is found in the same amplicon index as one with a gene we are looking at, then they are amplified together.
  importantAmps = overlap[which(overlap$ampIndex %in% ampliconsInvolved),]
  
  #Make a data frame we can plot now!
  plot = importantAmps %>% group_by(oncogene) %>% summarise(occurrence = n()) %>% arrange(desc(occurrence))
  plot = plot %>% filter(oncogene != gene) #We don't need to see how often the gene is involved in itself...
  
  
  p = ggplot(plot, aes(x = factor(oncogene, levels = pull(plot, oncogene)), y = occurrence)) +
  geom_bar(stat = "identity", fill= "cornflowerblue") +
  xlab("Oncogene") +
  ylab("Occurrence") +
    labs(title = paste0(gene, " correlated amplified oncogenes")) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust=1), axis.title.x = element_text(size = 10))

  ggsave(plot = p, filename = paste0(gene, ".png"))
  
  rm(temp,ampliconsInvolved, importantAmps, plot) #cleaning global environment
}
```

*Next steps:*

1.  Get rid of those amplicon samples that are larger than 20 mega bases (or 20 million bases)
2.  sophisticated p and q data cleaning- want ecDNA which are smaller than half the arm length it is on
3.  Find 24 most recurrent genes from Katie's list (rank based on the sum of heavily rearranged, BFB, AND circular)

cleanedOverlap.xlsx is the overlapping data between amplicons and oncogenes that has been cleaned for isoforms!!! We want to just clean THAT data frame, if we clean ecDNA then we have to do another bedtools and that's annoying... so just clean the data set that was already created from bedtools! Since that dataset already had the original amplicon data compared with the oncogene.

## Data Cleaning... on CLEAN OVERLAP

```{r}
library(tidyverse)
library(readxl)
overlap = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/cleanedOverlap.xlsx")
```

Now we want to first take out segments that are larger than 20 mega bases (20 million bases)

```{r}
overlap = overlap %>% mutate(amplength = Stop - Start) #make sure it is CAPITALIZED, choosing the amplicon start and stop and not the ongene start and stop!

indices = which(overlap$amplength < 20000000)
overlap = overlap[indices, ]

#boom. perfect. cleaned by taking out those with 20 million base pairs. Now we can write out that dataframe

#data went from 21,639 amplicon observations to 6367... 

library(xlsx)
write.xlsx(overlap, "cleaned_overlap_20mb.xlsx")
```

Now, we can use the chrom_arm data Dr. Zhang gave me to do a more sophisticated cleaning of amplicon samples which are smaller than half the arm length it is on

```{r}
library(tidyverse)
library(readxl)
overlap = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/cleanedOverlap.xlsx")
chrom_arm_hg19 = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/data_cleaning/chrom_arm_hg19.xlsx")
#Now we have the information on how long each chromosome arm is
```

```{r}
#Step 1: figure out which arm the amplicon sample is on. We will do this by calculating where the center of the segment is and then that will determing the arm it should be compared to (p or q)

overlap = overlap %>% mutate(center = ((Stop + Start)/2)) #find the genome position exactly in the middle
#now lets see which arm it is on


center = overlap$center
chromosome = overlap$Chr
arm = c()

for (i in seq_along(center)) {
  #make temp dataset based on chr
  pos = center[i]
  chr = chromosome[i]
  
  temp = chrom_arm_hg19[which(chrom_arm_hg19$chr == chr),]
  
  for (y in c(1:2)) {
    
    if (pos >= temp$start[y] && pos <= temp$stop[y]) {
      arm = append(arm, temp$arm[y]) #will append either p or q
      break
    }
    #else continue onto the second arm and checks
  }
  
}

overlap = overlap %>% mutate(chrarm = arm) #added which arm each amplicon is on!


rm(chr, i, pos, y, temp) #environment cleaning...
```

```{r}
#Step 2: Indicate the length of each amplicon segment and decide if it is half of the length of the indicated chromosomal arms... if so, we will keep it.

overlap = overlap %>% mutate(amplength = Stop - Start)

#We also want to know how long 1/2 of the arm is so we can add that to our other datframe
chrom_arm_hg19 = chrom_arm_hg19 %>% mutate(half = ((stop-start)/2))

#We now have the amplicon length and the half arm length we want to compare it to.

lengths = overlap$amplength
chr_arm = overlap$chrarm
chromosomes = overlap$Chr

keep = c()

for (i in seq_along(lengths)) {
  #make temp dataset based on chr, and which arm
  length = lengths[i]
  arm = chr_arm[i]
  chr = chromosomes[i]
  
  temp = chrom_arm_hg19[which(chrom_arm_hg19$chr == chr),]
  temp = temp[which(chrom_arm_hg19$arm == arm),]
  half = temp$half[1] #take out what the half length is we are looking for
  
  if (length < half) {
    keep = append(keep, "yes")
  } else {
    keep = append(keep, "no")
  }
  
}

rm(arm, chr, half, indices, i, length)
overlap = overlap %>% mutate(keepit = keep)

#Now just select those that have "yes" in the keep it columns, because they are less than half the length of the chromosome amr they are on... currently have 21,639 amplicon segment on this dataframe

clean = overlap[which(overlap$keepit == "yes"), ]

#We now only have 8,439 amplicon segments...

library(xlsx)
write.xlsx(clean, "cleaned_overlap_half_arm.xlsx")
```

Let's find the 24 most recurrent oncogenes from Katie's list (need to do another bedtools intersect with cleaned data to see which sites overlap with which oncogenes...)

```{r}
genes = unique(clean$oncogene)

temp = clean %>% group_by(oncogene) %>% summarise(value = n()) %>% arrange(desc(value))

```

## Which genes are most frequently amplified?

```{r}
library(tidyverse)
library(readxl)
overlap = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/data_cleaning/cleaned_overlap_half_arm.xlsx")[ ,-1]
#INNPUT DATAFRAME HERE.. FIRST DO 20MB CLEAN AND THEN HALF ARM CLEAN...^^

#oncogenes = unique(overlap$oncogene)
oncogenes = c("MDM2", "MYC", "EGFR", "CDK4", "ERBB2", "SOX2", "TERT", "CCND1", "E2F3", "CCNE1", "CDK6", "MDM4", "NEDD9", "MCL1", "AKT3", "BCL2L1", "ZNF217", "KRAS", "PDGFRA", "AKT1", "MYCL", "NKX2-1", "IGF1R", "PAX8")

genes = c()
occurrence = c()

for (gene in oncogenes) {
  temp = overlap[which(overlap$oncogene == gene), ]
  
  n = length(temp$oncogene)
    #gets number of genes amplified in our data
    
  genes = append(genes, gene)
  occurrence = append(occurrence, n)
}

temp = tibble(genes, occurrence) %>% arrange(desc(occurrence))
temp = temp[1:24, ] #pick 24 most frequently amplified oncogenes!

highgenes = pull(temp, genes)


rm(n,genes,gene,occurrence)




ampliconTypes = unique(overlap$amplicon)

oncogenes = c()
amplicon = c()
occurrence = c()

for (gene in highgenes) {
  temp = overlap[which(overlap$oncogene == gene), ]
  
  for (type in ampliconTypes) {
    n = sum(temp$amplicon == type)
    #gets number of type of amplicon on that oncogene
    
    oncogenes = append(oncogenes, gene)
    amplicon = append(amplicon, type)
    occurrence = append(occurrence, n)
  }
  
}

#cleaning
rm(n,type,gene,ampliconTypes)

plot = tibble(oncogenes, amplicon, occurrence)
```

```{r}
plot$amplicon = factor(plot$amplicon, levels = c("Heavily-rearranged", "BFB", "Circular"))

#we are going to manually order them lol...

ordering = plot[which(plot$amplicon == "Circular"),] %>% arrange(desc(occurrence))
order = pull(ordering, oncogenes)

rm(ordering) #cleaning


ggplot(plot, aes(x = factor(oncogenes, levels = highgenes), y = occurrence, fill = amplicon)) +
  geom_bar(stat = "identity") +
  xlab("Oncogene") +
  ylab("Amplicons") +
  labs(title = "24 Recurrent Oncogenes (<half arm data)") +
  scale_fill_manual(values = c("#CC99CC", "cornflowerblue", "#9966FF")) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust=1), axis.title.x = element_text(size = 10))
```

## Next... Comparing oncogenes with clean data

1.  Look at oncogene together ONLY on different chromosomes! Not on the same chromosome...

Actually just do MYC right now so we can see... not make it too complex

Just take genes FROM DIFFERENT CHROMOSOMES!

color code if they are on the same amplicon molecule, versus if they are in the same sample but not in the same molecule...

```{r}
library(tidyverse)
library(readxl)
overlap = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/cleanedOverlap.xlsx")
#INNPUT DATAFRAME HERE.. Just do overlap...^^

#Right now we are just looking a MYC... pick any oncogene NOT on chromosome 8.

total = overlap %>% count(oncogene)
total = total$n[which(total$oncogene == "MYC")]

MYC = overlap[which(overlap$oncogene == "MYC"), ]

#Now lets decide which samples include MYC on them, and which molecules (amplicons) have MYC on them...

uniqueSamples = unique(MYC$sample_barcode)
uniqueMolecules = unique(MYC$ampIndex)

#Now, lets look at the data and figure out which other oncogees are related to MYC and how many are in the same sample, same amplicon, or BOTH?

overlapClean = overlap[which(overlap$chr != "chr8"), ]
overlapClean = overlapClean %>% filter(sample_barcode %in% uniqueSamples | ampIndex %in% uniqueMolecules)

count = overlapClean %>% count(oncogene) %>% arrange(desc(n)) #Lets only seelct top 24 genes that correlate with MYC the most...
importantGenes = count[c(1:30),] %>% pull(oncogene) #pulls the 30 genes with the most occurance with MYC

#make a dataframe, first is oncogene, second is percentage, third is "both", "sample", "amplicon"

genes = c()
count = c()
type = c()


for (gene in importantGenes) {
  
  #First count how many are in same sample AND molecule
  temp = overlapClean[which(overlapClean$oncogene == gene), ] 
  temp = temp %>% filter(sample_barcode %in% uniqueSamples & ampIndex %in% uniqueMolecules)
  n = (length(temp$oncogene) / total) #percentage of all occurrences of MYC
  
  genes = append(genes, gene)
  count = append(count, n)
  type = append(type, "On molecule")
  
  #Then count how many are in same sample but NOT the same molecule...
  temp = overlapClean[which(overlapClean$oncogene == gene), ] 
  temp = temp %>% filter(sample_barcode %in% uniqueSamples & !ampIndex %in% uniqueMolecules)
  n = (length(temp$oncogene) / total) #percentage of all occurrences of MYC
  
  genes = append(genes, gene)
  count = append(count, n)
  type = append(type, "not on same molecule")
}

plot = tibble(genes, count, type)

```

```{r}
order = plot %>% filter(type == "On molecule") %>% arrange(desc(count)) %>% pull(genes)

ggplot(plot, aes(x = factor(genes, levels = order), y = count, fill = type)) +
  geom_bar(stat = "identity") +
  xlab("Oncogene") +
  ylab("Percentage Correlation") +
  labs(title = "MYC Oncogene Relation") +
  scale_fill_manual(values = c("#CC99CC", "cornflowerblue", "#9966FF")) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust=1), axis.title.x = element_text(size = 10))
```

FIRST pick genes from different

fishers test for control- are on sample but not coamplifyed

count total number of amplification

poisson()

DO:

1.  Make another file that lists the number of times that gene is co-amplified with MYC on the ***same*** molecule
2.  poisson() distribution to find a p- value (look into POISSON DISTRIBUTION)
3.  WHEN you get the most stringent list later, try this thing again...

whats the percentage that they're together?

```{r}
library(tidyverse)
library(readxl)
overlap = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/cleanedOverlap.xlsx")
#INNPUT DATAFRAME HERE.. Just do overlap...^^

#Right now we are just looking a MYC... pick any oncogene NOT on chromosome 8.

total = overlap %>% count(oncogene)
total = total$n[which(total$oncogene == "MYC")]

MYC = overlap[which(overlap$oncogene == "MYC"), ]

#Now lets decide which molecules (amplicons) have MYC on them...

uniqueMolecules = unique(MYC$ampIndex)

#Now, lets look at the data and figure out which other oncogees are related to MYC and how many are in the same sample, same amplicon, or BOTH?

overlapClean = overlap[which(overlap$chr != "chr8"), ]
overlapClean = overlapClean %>% filter(ampIndex %in% uniqueMolecules)

genecount = overlapClean %>% count(oncogene) %>% arrange(desc(n)) #Lets only seelct top 24 genes that correlate with MYC the most...
importantGenes = genecount[c(1:20),] %>% pull(oncogene) #pulls the 30 genes with the most occurance with MYC

#make a dataframe, first is oncogene, second is percentage, third is "both", "sample", "amplicon"

genes = c()
count = c()

for (gene in importantGenes) {
  
  #First count how many are in same molecule... side note, if they are on the same amplicon they must be in the same sample
  temp = overlapClean[which(overlapClean$oncogene == gene), ]
  n = (length(temp$oncogene) / total) #percentage of all occurrences of MYC
  
  genes = append(genes, gene)
  count = append(count, n)
}

plot = tibble(genes, count)

```

```{r}
order = plot %>% arrange(desc(count)) %>% pull(genes)

ggplot(plot, aes(x = factor(genes, levels = order), y = count)) +
  geom_bar(stat = "identity", fill = "cornflowerblue") +
  xlab("Oncogene") +
  ylab("Percentage Correlation") +
  labs(title = "MYC Molecule Relation to Oncogenes") +
  geom_text(aes(label=paste0(round(count, 2)*100,"%"))) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust=1), axis.title.x = element_text(size = 10))
```

New oncogene list

```{r}
library(tidyverse)
library(readxl)

oncogenes = read.table("/Users/haileyjohnson/Desktop/ecDNA_Project/data_cleaning/oncoKB.oncogenes.txt")
oncogenes = pull(oncogenes, V1)

overlap = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/cleanedOverlap.xlsx")
#INNPUT DATAFRAME HERE.. Just do overlap...^^

#Get specific oncogenes from Dr. Zhang's list
overlap = overlap %>% filter(oncogene %in% oncogenes)
#Went from 21,639 to 8459 observations

#Right now we are just looking a MYC... pick any oncogene NOT on chromosome 8.

total = overlap %>% count(oncogene)
total = total$n[which(total$oncogene == "MYC")]

MYC = overlap[which(overlap$oncogene == "MYC"), ]

#Now lets decide which molecules (amplicons) have MYC on them...

uniqueMolecules = unique(MYC$ampIndex)

#Now, lets look at the data and figure out which other oncogees are related to MYC and how many are in the same sample, same amplicon, or BOTH?

overlapClean = overlap[which(overlap$chr != "chr8"), ]
overlapClean = overlapClean %>% filter(ampIndex %in% uniqueMolecules)

genecount = overlapClean %>% count(oncogene) %>% arrange(desc(n)) #Lets only seelct top 24 genes that correlate with MYC the most...
importantGenes = genecount[c(1:20),] %>% pull(oncogene) #pulls the 30 genes with the most occurance with MYC

#make a dataframe, first is oncogene, second is percentage, third is "both", "sample", "amplicon"

genes = c()
count = c()

for (gene in importantGenes) {
  
  #First count how many are in same molecule... side note, if they are on the same amplicon they must be in the same sample
  temp = overlapClean[which(overlapClean$oncogene == gene), ]
  n = (length(temp$oncogene) / total) #percentage of all occurrences of MYC
  
  genes = append(genes, gene)
  count = append(count, n)
}

plot = tibble(genes, count)

```

```{r}
order = plot %>% arrange(desc(count)) %>% pull(genes)

ggplot(plot, aes(x = factor(genes, levels = order), y = count)) +
  geom_bar(stat = "identity", fill = "cornflowerblue") +
  xlab("Oncogene") +
  ylab("Percentage Correlation") +
  labs(title = "MYC Molecule Relation to Oncogenes (333 oncogene collection)") +
  geom_text(aes(label=paste0(round(count, 2)*100,"%"))) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust=1), axis.title.x = element_text(size = 10))
```

send gene count

send code

***Which oncogenes are being amplified together recurrently?*** 1 figure of 24 paper oncogenes... what percentage of amplicons for each of the 24 genes are also being amplified with other oncogenes (333 list) from other chromosomes?

look for samples that co-amplify MYC with other oncogene(s) on the same molecule, the other oncogene(s) should come from chromosomes other than chr8 (where MYC is)

```{r}
library(tidyverse)
library(readxl)

oncogenes = read.table("/Users/haileyjohnson/Desktop/ecDNA_Project/data_cleaning/oncoKB.oncogenes.txt")
oncogenes = pull(oncogenes, V1)

overlap = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/cleanedOverlap.xlsx")
#overlap = overlap %>% filter(oncogene %in% oncogenes)

paperGenes = c("MDM2", "MYC", "EGFR", "CDK4", "ERBB2", "SOX2", "TERT", "CCND1", "E2F3", "CCNE1", "CDK6", "MDM4", "NEDD9", "MCL1", "AKT3", "BCL2L1", "ZNF217", "KRAS", "PDGFRA", "AKT1", "MYCL", "NKX2-1", "IGF1R", "PAX8")

# Note: 3 of the 24 paper oncogenes are not included in the 333 list Dr. Zhang gave me

allGenes = c(oncogenes, paperGenes)
overlap = overlap %>% filter(oncogene %in% allGenes)
rm(allGenes) #environment cleaning... Just so we can include the 3 genes which aren't included in the 333 list

percentage = c() #this will store the ratio of samples amplified with interchromosomal oncogenes to all samples of that gene
test = c()

for (gene in paperGenes) {
  totalSamples = length(which(overlap$oncogene == gene)) #how many samples including that oncogene are there?
  
  temp = overlap %>% filter(oncogene == gene)
  uniqueMolecules = unique(temp$ampIndex) #extracts the unique amplicon molecules including that oncogene
  chromosome = unique(temp$chr)[1] #decides which chromosome the oncogene is on
  
  
  temp = overlap %>% filter(ampIndex %in% uniqueMolecules) %>% filter(oncogene != gene) %>% filter(chr != chromosome) #take out amplicons which uniquely are also associated with the gene we are looking at, filters out the genes so we are only looking at OTHER oncogenes, and lastly removes oncogenes which are on the same chromosome... we only want to assess interchromosomal amplification...
  
  x = length(unique(temp$ampIndex)) / totalSamples
  
  percentage = append(percentage, x)
}

interchrAmp = tibble(paperGenes, percentage)
rm(x, gene, chromosome, temp, totalSamples) #environment cleaning...
```

Wow, actually super interesting because I thought almost all samples would be coamplified with other oncogenes! But I guess because it is from other chromosomes...

```{r}
#plot interchrAmp!!
order = interchrAmp %>% arrange(desc(percentage)) %>% pull(paperGenes)

ggplot(interchrAmp, aes(x = factor(paperGenes, levels = order), y = percentage)) +
  geom_bar(stat = "identity", fill = "cornflowerblue") +
  xlab("Oncogene") +
  ylab("Percentage Samples Co-Amplified") +
  labs(title = "Interchromosomal Oncogene Amplification Ratio") +
  geom_text(aes(label=paste0(round(percentage, 2)*100,"%")), size = 2.7, vjust = -0.5) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust=1), axis.title.x = element_text(size = 10))
```

Interesting, but how do you also take into account the sample size? PDGFRA and PAX8 have a much smaller

```{r}
library(tidyverse)
library(readxl)
overlap = read_excel("/Users/haileyjohnson/Desktop/ecDNA_Project/cleanedOverlap.xlsx")
#INNPUT DATAFRAME HERE.. FIRST DO 20MB CLEAN AND THEN HALF ARM CLEAN...^^

#oncogenes = unique(overlap$oncogene)
oncogenes = c("MDM2", "MYC", "EGFR", "CDK4", "ERBB2", "SOX2", "TERT", "CCND1", "E2F3", "CCNE1", "CDK6", "MDM4", "NEDD9", "MCL1", "AKT3", "BCL2L1", "ZNF217", "KRAS", "PDGFRA", "AKT1", "MYCL", "NKX2-1", "IGF1R", "PAX8")

genes = c()
occurrence = c()

for (gene in oncogenes) {
  temp = overlap[which(overlap$oncogene == gene), ]
  
  n = length(temp$oncogene)
    #gets number of genes amplified in our data
    
  genes = append(genes, gene)
  occurrence = append(occurrence, n)
}

temp = tibble(genes, occurrence) %>% arrange(desc(occurrence))
temp = temp[1:24, ] #pick 24 most frequently amplified oncogenes!

highgenes = pull(temp, genes)


rm(n,genes,gene,occurrence)




ampliconTypes = unique(overlap$amplicon)

oncogenes = c()
amplicon = c()
occurrence = c()

for (gene in highgenes) {
  temp = overlap[which(overlap$oncogene == gene), ]
  
  for (type in ampliconTypes) {
    n = sum(temp$amplicon == type)
    #gets number of type of amplicon on that oncogene
    
    oncogenes = append(oncogenes, gene)
    amplicon = append(amplicon, type)
    occurrence = append(occurrence, n)
  }
  
}

#cleaning
rm(n,type,gene,ampliconTypes)

plot = tibble(oncogenes, amplicon, occurrence)

plot$amplicon = factor(plot$amplicon, levels = c("Heavily-rearranged", "BFB", "Circular"))

#we are going to manually order them lol...

ordering = plot[which(plot$amplicon == "Circular"),] %>% arrange(desc(occurrence))
order = pull(ordering, oncogenes)

rm(ordering) #cleaning


ggplot(plot, aes(x = factor(oncogenes, levels = highgenes), y = occurrence, fill = amplicon)) +
  geom_bar(stat = "identity") +
  xlab("Oncogene") +
  ylab("Amplicons") +
  labs(title = "24 Recurrent Oncogenes") +
  scale_fill_manual(values = c("#CC99CC", "cornflowerblue", "#9966FF")) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust=1), axis.title.x = element_text(size = 10))
```

Putting Linear BACK
